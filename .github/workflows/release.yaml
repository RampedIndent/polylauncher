name: Release
on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows#workflow_dispatch
  workflow_dispatch:

jobs:
  get-next-version:
    permissions:
      contents: write
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4
  check:
    name: check
    strategy:
      fail-fast: false
      matrix:
        version: [ 'ubuntu-latest']
    runs-on: ${{ matrix.version }}
    env:
      PROJECT_NAME: polylauncher
    steps:
      - uses: actions/checkout@v3
      - name: setup | rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v1
      - run: cargo check
  build-cli:
    permissions:
      contents: write
      issues: write
      pull-requests: write
    name: Build CLI ${{ matrix.build.target }}
    if: needs.get-next-version.outputs.new-release-published == 'true'
    runs-on: ${{ matrix.build.os }}
    needs:
      - get-next-version
    env:
      CARGO: cargo

    strategy:
      matrix:
        build:
          # alphabatized by target
          # - os: macOS-latest
          #   target: aarch64-apple-darwin
          #   cross: true
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   cross: true
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   cross: true
          # - os: ubuntu-latest
          #   target: i686-unknown-linux-gnu
          #   cross: true
          # - os: ubuntu-latest
          #   target: i686-unknown-linux-musl
          #   cross: true
          # - os: macOS-latest
          #   target: x86_64-apple-darwin
          #   cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   cross: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install build inputs
        if: runner.os == 'Linux' && !matrix.build.cross
        run: sudo apt install musl-tools
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: stable
          target: ${{ matrix.build.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Prepare semantic-release for Rust
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Configure cross
        if: matrix.build.cross
        run: echo "CARGO=cross" >> "$GITHUB_ENV"

      - name: Compile release binary
        run: ${{ env.CARGO }} build --bin polylauncher-daemon --release --target ${{ matrix.build.target }} --verbose

      - name: Create release archive
        run: |
          mkdir dist
          cp target/${{ matrix.build.target }}/release/polylauncher-daemon dist/polylauncher-daemon-${{ matrix.build.target }}
      - name: Create binary checksum
        run: shasum --algorithm 256 --binary polylauncher-daemon-${{ matrix.build.target }} | tee polylauncher-daemon-${{ matrix.build.target }}-SHA256SUM.txt
        working-directory: ./dist

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build.target }}
          path: |
            dist/polylauncher-daemon-${{ matrix.build.target }}
            dist/polylauncher-daemon-${{ matrix.build.target }}-SHA256SUM.txt
          if-no-files-found: error
          retention-days: 1
  release:
    runs-on: ubuntu-latest
    environment: release
    name: Release
    if: needs.get-next-version.outputs.new-release-published == 'true'
    needs:
      - build-cli
      - get-next-version

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # Fetch all history and tags for calculating next semantic version
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}


      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: ls artifacts
        run: ls -R ./artifacts


      - name: Prepare GitHub Release artifacts
        run: |
          mkdir dist/
          mv artifacts/x86_64-unknown-linux-gnu dist/
      - name: Combine checksums
        run: cat dist/**/polylauncher-daemon-*-SHA256SUM.txt | tee dist/SHA256SUMS.txt

      - name: Prepare semantic-release-cargo for local use
        run: |
          cp dist/x86_64-unknown-linux-gnu/polylauncher-daemon-x86_64-unknown-linux-gnu ./polylauncher-daemon
          chmod +x ./polylauncher-daemon
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          
        with:
          # You can specify specifying version range for the extra plugins if you prefer.
          extra_plugins: |
            @semantic-release-cargo/semantic-release-cargo
          disable-semantic-release-cargo: true
